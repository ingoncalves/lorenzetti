#!/usr/bin/env python3

import argparse
import sys
from pathlib import Path

from GaugiKernel.constants import MINUTES
from GaugiKernel import LoggingLevel, get_argparser_formatter
from G4Kernel import ComponentAccumulator, EventReader
from RootStreamBuilder import recordable
from ATLAS import ATLASConstruction as ATLAS
from CaloCellBuilder import CaloHitBuilder
from RootStreamBuilder import RootStreamHITMaker


def parse_args():
    parser = argparse.ArgumentParser(
        description='',
        add_help=False,
        formatter_class=get_argparser_formatter())

    parser.add_argument('-i', '--input-file', action='store',
                        dest='input_file', required=True,
                        help="The event input file generated "
                        "by the Pythia event generator.")

    parser.add_argument('-o', '--output-file', action='store',
                        dest='output_file', required=True,
                        help="The reconstructed event file "
                        "generated by lzt/geant4 framework.")

    parser.add_argument('-nt', '--number-of-threads', action='store',
                        dest='number_of_threads', required=False,
                        type=int, default=1,
                        help="The number of threads")

    parser.add_argument('--evt', '--number-of-events', action='store',
                        dest='number_of_events', required=False,
                        type=int, default=None,
                        help="The number of events to apply"
                        " the reconstruction.")

    parser.add_argument('--enable-magnetic-field', action='store_true',
                        dest='enable_magnetic_field', required=False,
                        help="Enable the magnetic field.")

    parser.add_argument('-t', '--timeout', action='store',
                        dest='timeout', required=False, type=int, default=120,
                        help="Event timeout in minutes")

    parser.add_argument('-l', '--output-level', action='store',
                        dest='output_level', required=False,
                        type=str, default='INFO',
                        help="The output level messenger.")

    parser.add_argument('-c', '--command', action='store',
                        dest='command', required=False, default="''",
                        help="The preexec command")

    if len(sys.argv) == 1:
        print(parser.print_help())
        sys.exit(1)

    args = parser.parse_args()
    args.input_file = Path(args.input_file)
    if not args.input_file.exists():
        raise FileNotFoundError(f"Input file {args.input_file} not found.")
    if args.input_file.is_dir():
        args.input_file = args.input_file.glob("*.root")
    else:
        args.input_file = [args.input_file]
    return args


def main(logging_level: str,
         input_file: str | Path,
         output_file: str | Path,
         command: str,
         enable_magnetic_field: bool,
         timeout: int,
         number_of_events: int,
         number_of_threads: int):

    if isinstance(input_file, Path):
        input_file = str(input_file)
    if isinstance(output_file, Path):
        output_file = str(output_file)

    exec(command)

    outputLevel = LoggingLevel.toC(logging_level)

    # Build the ATLAS detector
    detector = ATLAS(UseMagneticField=enable_magnetic_field)

    acc = ComponentAccumulator("ComponentAccumulator", detector,
                               NumberOfThreads=number_of_threads,
                               OutputFile=output_file,
                               Timeout=timeout * MINUTES)

    gun = EventReader("EventReader", input_file,
                      # outputs
                      OutputEventKey=recordable("Events"),
                      OutputTruthKey=recordable("Particles"),
                      OutputSeedKey=recordable("Seeds"),
                      )

    calorimeter = CaloHitBuilder("CaloHitBuilder",
                                 HistogramPath="Expert/Hits",
                                 OutputLevel=outputLevel,
                                 InputEventKey=recordable("Events"),
                                 OutputHitsKey=recordable("Hits")
                                 )
    gun.merge(acc)
    calorimeter.merge(acc)

    HIT = RootStreamHITMaker("RootStreamHITMaker",
                             OutputLevel=outputLevel,
                             # input from context
                             InputHitsKey=recordable("Hits"),
                             InputEventKey=recordable("Events"),
                             InputTruthKey=recordable("Particles"),
                             InputSeedsKey=recordable("Seeds"),
                             )
    acc += HIT
    acc.run(number_of_events)


if __name__ == "__main__":
    args = parse_args()
    splitted_output_filename = args.output_file.split(".")
    for i, input_file in enumerate(args.input_file):
        output_file = splitted_output_filename.copy()
        output_file.insert(-1, str(i))
        output_file = Path('.'.join(output_file))
        if output_file.exists():
            print(f"{i} - Output file {output_file} already exists. Skipping.")
            continue
        # No joblib, parallelization is handled by Geant4
        main(logging_level=args.output_level,
             input_file=input_file,
             output_file=output_file,
             command=args.command,
             enable_magnetic_field=args.enable_magnetic_field,
             timeout=args.timeout,
             number_of_events=args.number_of_events,
             number_of_threads=args.number_of_threads)
